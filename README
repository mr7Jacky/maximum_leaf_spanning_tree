# Maximum Leaf Spanning Tree Project

#### Introduction
This project is adapted from [Berkeley CS 170 Maximum Leaf Spanning Tree contest](https://github.com/jimmyjwu/maximum_leaf_spanning_tree). We restructured the algorithm and change the file I/Os.

#### Team member
* Jiaqi Lin
* Liang Liu
* Yi Jiang

#### File Structure
FILE_FORMAT			- Specifies the file format for inputs (graphs) and outputs (trees).

Papers/				- Contains useful academic research papers.

python/				- Contains instructor-provided tools.
	check_input.py 		- Checks that your input conforms to FILE_FORMAT.
	check_output.py 	- Checks that your output conforms to FILE_FORMAT.
	checker.py
	config.py
	constants.py 			- Contains constant values used in our functions.
	disjointsets.py 		- Contains an implementation of the disjoint sets data structure.
	graph.py 				- Contains useful graph-related classes.
	graph_generator.py 		- Our primary module for generating hard instances.
	graph_helper.py 		- Contains useful helper methods for dealing with graphs.
	graph_solver.py 		- Our primary module for generating leafy spanning trees from graphs.
	hard.all.v3.in 			- Every team's hard instances (input graphs).
	hard.all.v3.out 		- Our solutions to every team's hard instances (output trees).
	hard.in 				- Our hard instances (input graphs).
	hard.out 				- Our hard instances (output trees).
	input_output.py 		- Contains functions for reading and writing graphs from/to files.
	manually_solved.in 		- Contains graphs that have been manually solved.
	manually_solved.out 	- Contains solutions (trees) to graphs that have been manually solved.
	reader.py
	README-python 			- Instructions for using the Python format checkers.
	solver_algorithms.py 	- Contains all our algorithms for solving graphs.
	team.txt 				- Our team member list.

mlst.in 	- contains sample inputs.
mlst.out 	- contains sample outputs corresponding to the sample inputs.